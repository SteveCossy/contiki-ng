## The COOJA Simulator Contiki platform Makefile
##
## This makefile should normally never be called directly, but
## rather from inside the COOJA simulator.
## The purpose of this file is to compile a shared library that
## can be loaded into the Java part of COOJA.

EXPECTED_COOJA_VERSION = 2022052601

ifndef CONTIKI
  $(error CONTIKI not defined!)
endif

ifdef LIBNAME
# Detect incompatible Cooja versions when not performing "make clean".
ifneq ($(MAKECMDGOALS),clean)
  ifndef COOJA_VERSION
    $(error COOJA_VERSION not defined, please upgrade Cooja)
  endif

  ifneq ($(COOJA_VERSION),$(EXPECTED_COOJA_VERSION))
    $(error Got COOJA_VERSION $(COOJA_VERSION) but expected $(EXPECTED_COOJA_VERSION))
  endif
endif
endif

COOJA_DIR = $(CONTIKI_NG_TOOLS_DIR)/cooja

# Use dbg-io for IO functions like printf()
MODULES += os/lib/dbg-io

JAVA_INCDIR := $(shell $(JAVA) -XshowSettings:properties -version 2>&1 | grep java.home | awk -F"= " '{print $$2}')
ifneq ($(MAKECMDGOALS),clean)
  ifeq ($(JAVA_INCDIR),)
    $(error No java.home found from "$(JAVA) -XshowSettings:properties -version")
  endif
endif

JAVA_FRAMEWORK ?= JavaNativeFoundation

ifeq ($(HOST_OS),Windows)
  JAVA_OS_NAME = win32
  CC = mingw32-gcc
  CFLAGS += -D__int64\="long long"
  LDFLAGS += -shared -Wl,--add-stdcall-alias -L/usr/lib/mingw
else ifeq ($(HOST_OS),Darwin)
  JAVA_OS_NAME = darwin
  CFLAGS += -fno-common -DHAVE_SNPRINTF
  LDFLAGS_WERROR = -Wl,-fatal_warnings
  LDFLAGS += -dynamiclib -fno-common -framework $(JAVA_FRAMEWORK)
  # No objcopy in OS X, disable.
  OBJCOPY = true
else
  JAVA_OS_NAME = linux
  CFLAGS += -fPIC
  LDFLAGS += -shared -Wl,-zdefs -Wl,-Map=$(MAPFILE)
endif

CC ?= gcc
LD = $(CC)
# All .csc files contain calls to make with targets that are not the ones
# Cooja need. Just disable the final copy so Cooja can share the build
# system with the rest of Contiki-NG.
CP = true
OBJCOPY ?= objcopy

JAVA_CFLAGS = -I"$(JAVA_INCDIR)/include" -I"$(JAVA_INCDIR)/include/$(JAVA_OS_NAME)"

REDEFINE_PRINTF = 1

### Assuming simulator quickstart if no JNI library name set from Cooja
ifndef LIBNAME
ifneq ($(MAKECMDGOALS),clean)

CURDIR := $(shell pwd)

.PHONY: $(MAKECMDGOALS)
%.csc %.csc.gz:
	$(Q)ant -e -logger org.apache.tools.ant.listener.SimpleBigProjectLogger -f $(COOJA_DIR)/build.xml run_bigmem -Dargs="-quickstart=$(addprefix $(CURDIR)/,$(firstword $(MAKECMDGOALS))) -contiki=$(realpath $(CONTIKI)) -logdir=$(CURDIR)"
endif
endif ## QUICKSTART

# No stack end symbol available, code does not work on 64-bit architectures.
MODULES_SOURCES_EXCLUDES += stack-check.c
# No Serial Peripheral Interface in Cooja.
MODULES_SOURCES_EXCLUDES += spi.c

### COOJA platform sources
CONTIKI_TARGET_DIRS = . dev lib sys cfs

# (COOJA_SOURCEDIRS contains additional sources dirs set from simulator)
vpath %.c $(COOJA_SOURCEDIRS)

COOJA_BASE	= simEnvChange.c cooja_mt.c cooja_mtarch.c rtimer-arch.c watchdog.c int-master.c

COOJA_INTFS	= beep.c ip.c leds-arch.c moteid.c \
		    pir-sensor.c rs232.c vib-sensor.c \
		    clock.c cooja-log.c cfs-cooja.c cooja-radio.c \
			eeprom.c slip-arch.c

COOJA_CORE = random.c sensors.c leds.c gpio-hal-arch.c buttons.c

# (COOJA_SOURCEFILES contains additional sources set from simulator)
CONTIKI_TARGET_SOURCEFILES = \
$(COOJA_BASE) $(COOJA_INTFS) $(COOJA_CORE) $(COOJA_NET) $(COOJA_SOURCEFILES)

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

.SUFFIXES:

CLEAN += COOJA.log

### Compiler arguments
CFLAGSNO = $(JAVA_CFLAGS) $(EXTRA_CC_ARGS) -Wall -g -I/usr/local/include -DCLASSNAME=$(CLASSNAME)
ifeq ($(WERROR),1)
CFLAGSNO += -Werror
endif
CFLAGS   += $(CFLAGSNO)

# Set build/cooja/mtype<NNN>.map as mapfile for the final link. The rest
# of the rule resides in Makefile.include.
$(BUILD_DIR_BOARD)/%.$(TARGET): MAPFILE = $(LIBNAME:.cooja=.map)

# This is mtype<NNN>.o which is built from platform.c with
# CLASSNAME passed from the environment by Cooja.
MTYPE_OBJ = $(LIBNAME:.cooja=.o)

PROJECT_OBJECTFILES += $(MTYPE_OBJ)

$(MTYPE_OBJ): platform.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CCACHE) $(CC) $(CFLAGS) -c $< -o $@
