CONTIKI_CPU_DIRS = . net dev

CONTIKI_SOURCEFILES += rtimer-arch.c watchdog.c eeprom.c int-master.c
CONTIKI_SOURCEFILES += gpio-hal-arch.c

### Compiler definitions
CC       = gcc
CXX      = g++
ifdef LD_OVERRIDE
  LD     = $(LD_OVERRIDE)
else
  LD     = gcc
endif
AS       = as
NM       = nm
OBJCOPY  = objcopy
STRIP    = strip
ifeq ($(WERROR),1)
CFLAGSWERROR=-Werror
endif
CFLAGSNO = -Wall -g $(CFLAGSWERROR)
CFLAGS  += $(CFLAGSNO)

### Are we building with code size optimisations?
SMALL ?= 0

# The optimizations on native platform cannot be enabled in GCC (not Clang) versions less than 7.2
GCC_IS_CLANG := $(shell $(CC) --version 2> /dev/null | grep clang)
ifneq ($(GCC_IS_CLANG),)
  NATIVE_CAN_OPTIIMIZE = 1
else
  GCC_VERSION := $(shell $(CC) -dumpfullversion -dumpversion | cut -b1-3)
  ifeq ($(shell expr $(GCC_VERSION) \>= 7.2), 1)
    NATIVE_CAN_OPTIIMIZE = 1
  else
    NATIVE_CAN_OPTIIMIZE = 0
  endif
endif

ifeq ($(NATIVE_CAN_OPTIIMIZE),1)
  ifeq ($(SMALL),1)
    CFLAGS += -Os
  else
    CFLAGS += -O2
  endif
endif

ifeq ($(HOST_OS),Darwin)
AROPTS = -rc
LDFLAGS_WERROR := -Wl,-fatal_warnings
LDFLAGS += -Wl,-flat_namespace
CFLAGS += -DHAVE_SNPRINTF=1 -U__ASSERT_USE_STDERR
endif

# Disallow undefined symbols in object files.
ifeq ($(HOST_OS),Linux)
LDFLAGS += -Wl,-zdefs
endif

MAKE_MAC ?= MAKE_MAC_NULLMAC

### Compilation rules

%.so: $(OBJECTDIR)/%.o
	$(Q)$(LD) -shared $(LDFLAGS) -o $@ $^
