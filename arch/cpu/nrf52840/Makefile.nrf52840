HEAPSIZE := 8192
STACKSIZE := 8192

ifndef NRF52_SDK_ROOT
  $(error NRF52_SDK_ROOT not defined! You must specify where nRF52 SDK resides!)
endif

ifneq ($(filter %.flash erase,$(MAKECMDGOALS)),)
ifeq ($(NRF52_JLINK_PATH),)
NRF52_JLINK_PATH=$(shell location=$$(which JLinkExe) && dirname $$location)
endif
ifeq ($(NRF52_JLINK_PATH),)
  $(error JLink not found in PATH and NRF52_JLINK_PATH path is not defined)
endif
endif

# custom MAC: ble_ipsp_mac_driver
# MAKE_MAC ?= MAKE_MAC_OTHER

$(info SDK: $(NRF52_SDK_ROOT))

ifeq ($(NRF52_DK_REVISION),)
NRF52_DK_REVISION=pca10056
endif

ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
  ifeq ($(NRF52_SOFTDEVICE),)
    NRF52_SOFTDEVICE := $(shell find $(NRF52_SDK_ROOT) -name s140_nrf52*_softdevice.hex | head -n 1)
  endif
  $(info SoftDevice: $(NRF52_SOFTDEVICE))
  #LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52-$(NRF52_DK_REVISION)-sd.ld
  LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52840_xxaa.ld
else
  #LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52.ld
  LDSCRIPT ?= $(CONTIKI_CPU)/ld/nrf52840_xxaa.ld
endif

OUTPUT_FILENAME := $(CONTIKI_PROJECT)
MAKEFILE_NAME := $(MAKEFILE_LIST)
MAKEFILE_DIR := $(dir $(MAKEFILE_NAME) )

TEMPLATE_PATH = $(NRF52_SDK_ROOT)/components/toolchain/gcc

OBJECT_DIRECTORY = $(OBJECTDIR)
LISTING_DIRECTORY := $(OBJECTDIR)
OUTPUT_BINARY_DIRECTORY := bin_$(TARGET)

# JLink
JLINK := $(NRF52_JLINK_PATH)/JLinkExe
JLINK_OPTS = -Device NRF52 -if swd -speed 1000
ifneq ($(NRF52_JLINK_SN),)
JLINK_OPTS += -SelectEmuBySN $(NRF52_JLINK_SN)
endif

#function for removing duplicates in a list
remduplicates = $(strip $(if $1,$(firstword $1) $(call remduplicates,$(filter-out $(firstword $1),$1))))

### CPU-dependent directories
CONTIKI_CPU_DIRS += . dev ble ieee802154 #compat

### CPU-dependent source files
CONTIKI_CPU_SOURCEFILES += clock.c rtimer-arch.c uart0.c dbg.c watchdog.c
CONTIKI_CPU_SOURCEFILES += int-master.c nrf802154.c ieee-addr.c

#ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
#CONTIKI_CPU_SOURCEFILES += ble-core.c ble-mac.c
#endif

CONTIKI_SOURCEFILES += $(CONTIKI_CPU_SOURCEFILES)

include $(ARCH_PATH)/cpu/nrf52840/third_party/NordicSemiconductor/Makefile

# Source files common to all targets
C_SOURCE_FILES += $(NRF52_SDK_ROOT)/components/boards/boards.c \
  $(NRF52_SDK_ROOT)/components/libraries/util/app_error.c \
  $(NRF52_SDK_ROOT)/components/libraries/util/app_error_handler_gcc.c \
  $(NRF52_SDK_ROOT)/components/libraries/util/app_error_weak.c \
  $(NRF52_SDK_ROOT)/components/libraries/util/nrf_assert.c \
  $(NRF52_SDK_ROOT)/components/libraries/queue/nrf_queue.c \
  $(NRF52_SDK_ROOT)/components/libraries/strerror/nrf_strerror.c \
  $(NRF52_SDK_ROOT)/components/iot/ble_6lowpan/ble_6lowpan.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_clock.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_power_clock.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_rtc.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_gpiote.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_timer.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_wdt.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_uart.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_uarte.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_rng.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/drivers/src/nrfx_wdt.c \
  $(NRF52_SDK_ROOT)/modules/nrfx/mdk/system_nrf52.c \
  $(NRF52_SDK_ROOT)/integration/nrfx/legacy/nrf_drv_clock.c \
  $(NRF52_SDK_ROOT)/integration/nrfx/legacy/nrf_drv_rng.c \
  $(NRF52_SDK_ROOT)/components/softdevice/common/nrf_sdh.c \
#  $(NRF52_SDK_ROOT)/integration/nrfx/legacy/nrf_drv_uart.c \
#  $(NRF52_SDK_ROOT)/components/drivers_nrf/nrf_soc_nosd/nrf_nvic.c \
#  $(NRF52_SDK_ROOT)/components/drivers_nrf/nrf_soc_nosd/nrf_soc.c \

ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
C_SOURCE_FILES += $(NRF52_SDK_ROOT)/components/softdevice/common/nrf_sdh.c \
                  $(NRF52_SDK_ROOT)/components/ble/common/ble_advdata.c
else
C_SOURCE_FILES += $(NRF52_SDK_ROOT)/components/libraries/fifo/app_fifo.c \
                  $(NRF52_SDK_ROOT)/components/libraries/util/app_util_platform.c
endif

#assembly files common to all targets
ASM_SOURCE_FILES = $(NRF52_SDK_ROOT)/modules/nrfx/mdk/gcc_startup_nrf52840.S

# Include folders common to all targets
INC_PATHS += modules/nrfx
INC_PATHS += modules/nrfx/mdk
INC_PATHS += modules/nrfx/hal
INC_PATHS += modules/nrfx/drivers
INC_PATHS += modules/nrfx/drivers/include
INC_PATHS += components
INC_PATHS += components/libraries/experimental_memobj
INC_PATHS += components/libraries/experimental_section_vars
INC_PATHS += components/libraries/balloc
#INC_PATHS += components/libraries/experimental_log
#INC_PATHS += components/libraries/experimental_log/src
INC_PATHS += components/libraries/bsp
INC_PATHS += components/libraries/strerror
INC_PATHS += components/libraries/delay
INC_PATHS += components/libraries/util
INC_PATHS += components/boards
INC_PATHS += components/softdevice/s140/headers
INC_PATHS += integration/nrfx
INC_PATHS += integration/nrfx/legacy
INC_PATHS += components/libraries/queue
INC_PATHS += components/iot/ble_6lowpan
INC_PATHS += components/ble/ble_services/ble_ipsp/
INC_PATHS += components/iot/common
INC_PATHS += components/iot/context_manager
INC_PATHS += components/libraries/mem_manager
INC_PATHS += components/libraries/log
INC_PATHS += components/libraries/log/src
INC_PATHS += config/nrf52840/config

ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
INC_PATHS += components/softdevice/s140/headers
INC_PATHS += components/softdevice/s140/headers/nrf52
INC_PATHS += components/softdevice/common
INC_PATHS += components/ble/common
INC_PATHS += components/iot/common
INC_PATHS += components/ble/ble_services/ble_ipsp
else
INC_PATHS += components/drivers_nrf/nrf_soc_nosd
INC_PATHS += components/libraries/fifo
endif

EXTERNALDIRS += $(addprefix $(NRF52_SDK_ROOT)/, $(INC_PATHS))

$(info INCLUDE: $(EXTERNALDIRS))

# Sorting removes duplicates
BUILD_DIRECTORIES := $(sort $(OUTPUT_BINARY_DIRECTORY) $(LISTING_DIRECTORY))

### If the user-specified a Node ID, pass a define
ifdef NODEID
  CFLAGS += -DIEEE_ADDR_NODE_ID=$(NODEID)
endif

CFLAGS += -D__HEAP_SIZE=$(HEAPSIZE)
CFLAGS += -D__STACK_SIZE=$(STACKSIZE)
CFLAGS += -DRAAL_SINGLE_PHY -DNRF_802154_USE_RAW_API=0 -DNRF_802154_CLOCK_LFCLK_SOURCE=CLOCK_LFCLKSRC_SRC_Synth
CFLAGS += -DNRFX_TIMER_ENABLED=1
CFLAGS += -DNRFX_TIMER1_ENABLED=1

#flags common to all targets
ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
CFLAGS += -DSOFTDEVICE_PRESENT
CFLAGS += -DS140
CFLAGS += -DNRF_SDH_SOC_ENABLED=1
endif

CFLAGS += -DNRF52840_XXAA
CFLAGS += -DBOARD_$(shell echo $(NRF52_DK_REVISION) | tr a-z A-Z)
#CFLAGS += -D__HEAP_SIZE=512
CFLAGS += -DSWI_DISABLE0
CFLAGS += -DCONFIG_GPIO_AS_PINRESET
CFLAGS += -DBLE_STACK_SUPPORT_REQD
CFLAGS += -ggdb
CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
CFLAGS += -DENABLE_DEBUG_ASSERT=1

# TODO SET FROM MACRO
CFLAGS += -DNRF_802154_CSMA_CA_ENABLED=0
#CFLAGS += -DNRF_802154_USE_RAW_API=0

# keep every function in separate section. This will allow linker to dump unused functions
LDFLAGS += -Xlinker -Map=$(CONTIKI_NG_PROJECT_MAP)
LDFLAGS += -mabi=aapcs -L $(TEMPLATE_PATH)
#zhitao's
LDFLAGS += -L $(NRF52_SDK_ROOT)/modules/nrfx/mdk

LDFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
# let linker to dump unused sections
LDFLAGS += -Wl,--gc-sections
# use newlib in nano version
LDFLAGS += --specs=nano.specs -lc -lnosys

# Assembler flags
ifneq ($(NRF52_WITHOUT_SOFTDEVICE),1)
ASMFLAGS += -DSOFTDEVICE_PRESENT
ASMFLAGS += -DS140
endif
ASMFLAGS += -x assembler-with-cpp
ASMFLAGS += -DSWI_DISABLE0
ASMFLAGS += -DNRF52840_XXAA
ASMFLAGS += -DBOARD_$(shell echo $(NRF52_DK_REVISION) | tr a-z A-Z)
ASMFLAGS += -DCONFIG_GPIO_AS_PINRESET
ASMFLAGS += -DBLE_STACK_SUPPORT_REQD

C_SOURCE_FILE_NAMES = $(notdir $(C_SOURCE_FILES))
C_PATHS = $(call remduplicates, $(dir $(C_SOURCE_FILES) ) )
C_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(C_SOURCE_FILE_NAMES:.c=.o) )

ASM_SOURCE_FILE_NAMES = $(notdir $(ASM_SOURCE_FILES))
ASM_PATHS = $(call remduplicates, $(dir $(ASM_SOURCE_FILES) ))
ASM_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(ASM_SOURCE_FILE_NAMES:.S=.o) )

vpath %.c $(C_PATHS)
vpath %.s $(ASM_PATHS)

OBJECTS = $(C_OBJECTS) $(ASM_OBJECTS)

NRFLIB = $(BUILD_DIR_BOARD)/nrf52840.a

# TARGET_LIBS = $(NRFLIB) $(NRF52_SDK_ROOT)/components/iot/ble_6lowpan/lib/ble_6lowpan.a
#zhitao's
TARGET_LIBS = $(NRFLIB)

$(NRFLIB): $(OBJECTS)
	$(TRACE_AR)
	$(Q)$(AR) $(AROPTS) $@ $^

# Assemble files
$(OBJECT_DIRECTORY)/%.o: %.S
	$(TRACE_CC)
	$(Q)$(CC) $(ASMFLAGS) $(addprefix -I$(NRF52_SDK_ROOT)/, $(INC_PATHS)) -c -o $@ $<

include $(ARCH_PATH)/cpu/arm/cortex-m/cm4/Makefile.cm4

%.jlink: $(OUT_HEX)
	sed -e 's,#OUTPUT_FILENAME#,$<,' $(CONTIKI_CPU)/flash.jlink > $@

%.flash: %.jlink
	@echo Flashing: $^
	$(JLINK) $(JLINK_OPTS) -CommanderScript $*.jlink

softdevice.jlink:
	sed -e 's,#OUTPUT_FILENAME#,$(NRF52_SOFTDEVICE),' $(CONTIKI_CPU)/flash.jlink > $@

softdevice.flash: softdevice.jlink
	@echo Flashing: $(notdir $(NRF52_SOFTDEVICE))
	$(JLINK) $(JLINK_OPTS) -CommanderScript $^

erase:
	$(JLINK) $(JLINK_OPTS) -CommanderScript $(CONTIKI_CPU)/erase.jlink

.PHONY: softdevice.jlink
